/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Autocompletes
    /// </summary>
    [DataContract]
    public partial class Autocompletes :  IEquatable<Autocompletes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Autocompletes" /> class.
        /// </summary>
        /// <param name="autocompletes">An array of autocompletes.</param>
        public Autocompletes(List<Autocomplete> autocompletes = default(List<Autocomplete>))
        {
            this._Autocompletes = autocompletes;
        }
        
        /// <summary>
        /// An array of autocompletes
        /// </summary>
        /// <value>An array of autocompletes</value>
        [DataMember(Name="autocompletes", EmitDefaultValue=false)]
        public List<Autocomplete> _Autocompletes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Autocompletes {\n");
            sb.Append("  _Autocompletes: ").Append(_Autocompletes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Autocompletes);
        }

        /// <summary>
        /// Returns true if Autocompletes instances are equal
        /// </summary>
        /// <param name="input">Instance of Autocompletes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Autocompletes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Autocompletes == input._Autocompletes ||
                    this._Autocompletes != null &&
                    input._Autocompletes != null &&
                    this._Autocompletes.SequenceEqual(input._Autocompletes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Autocompletes != null)
                    hashCode = hashCode * 59 + this._Autocompletes.GetHashCode();
                return hashCode;
            }
        }
    }

}
