/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Category
    /// </summary>
    [DataContract]
    public partial class Category :  IEquatable<Category>
    {
        /// <summary>
        /// The taxonomy of the category
        /// </summary>
        /// <value>The taxonomy of the category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxonomyEnum
        {
            /// <summary>
            /// Enum IabQag for value: iab-qag
            /// </summary>
            [EnumMember(Value = "iab-qag")]
            IabQag = 1,

            /// <summary>
            /// Enum IptcSubjectcode for value: iptc-subjectcode
            /// </summary>
            [EnumMember(Value = "iptc-subjectcode")]
            IptcSubjectcode = 2

        }

        /// <summary>
        /// The taxonomy of the category
        /// </summary>
        /// <value>The taxonomy of the category</value>
        [DataMember(Name="taxonomy", EmitDefaultValue=false)]
        public TaxonomyEnum? Taxonomy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="confident">It defines whether the extracted category is confident or not.</param>
        /// <param name="id">The ID of the category.</param>
        /// <param name="level">The level of the category.</param>
        /// <param name="links">links.</param>
        /// <param name="score">The score of the category.</param>
        /// <param name="taxonomy">The taxonomy of the category.</param>
        public Category(bool confident = default(bool), string id = default(string), int level = default(int), CategoryLinks links = default(CategoryLinks), double score = default(double), TaxonomyEnum? taxonomy = default(TaxonomyEnum?))
        {
            this.Confident = confident;
            this.Id = id;
            this.Level = level;
            this.Links = links;
            this.Score = score;
            this.Taxonomy = taxonomy;
        }
        
        /// <summary>
        /// It defines whether the extracted category is confident or not
        /// </summary>
        /// <value>It defines whether the extracted category is confident or not</value>
        [DataMember(Name="confident", EmitDefaultValue=false)]
        public bool Confident { get; set; }

        /// <summary>
        /// The ID of the category
        /// </summary>
        /// <value>The ID of the category</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The level of the category
        /// </summary>
        /// <value>The level of the category</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public int Level { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public CategoryLinks Links { get; set; }

        /// <summary>
        /// The score of the category
        /// </summary>
        /// <value>The score of the category</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double Score { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Confident: ").Append(Confident).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Taxonomy: ").Append(Taxonomy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Category);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="input">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Confident == input.Confident ||
                    (this.Confident != null &&
                    this.Confident.Equals(input.Confident))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Taxonomy == input.Taxonomy ||
                    (this.Taxonomy != null &&
                    this.Taxonomy.Equals(input.Taxonomy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Confident != null)
                    hashCode = hashCode * 59 + this.Confident.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Taxonomy != null)
                    hashCode = hashCode * 59 + this.Taxonomy.GetHashCode();
                return hashCode;
            }
        }
    }

}
