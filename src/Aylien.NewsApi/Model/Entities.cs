/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Entities
    /// </summary>
    [DataContract]
    public partial class Entities :  IEquatable<Entities>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Entities" /> class.
        /// </summary>
        /// <param name="body">An array of extracted entities from the story body.</param>
        /// <param name="title">An array of extracted entities from the story title.</param>
        public Entities(List<Entity> body = default(List<Entity>), List<Entity> title = default(List<Entity>))
        {
            this.Body = body;
            this.Title = title;
        }
        
        /// <summary>
        /// An array of extracted entities from the story body
        /// </summary>
        /// <value>An array of extracted entities from the story body</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public List<Entity> Body { get; set; }

        /// <summary>
        /// An array of extracted entities from the story title
        /// </summary>
        /// <value>An array of extracted entities from the story title</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public List<Entity> Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Entities {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Entities);
        }

        /// <summary>
        /// Returns true if Entities instances are equal
        /// </summary>
        /// <param name="input">Instance of Entities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entities input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Body == input.Body ||
                    this.Body != null &&
                    input.Body != null &&
                    this.Body.SequenceEqual(input.Body)
                ) && 
                (
                    this.Title == input.Title ||
                    this.Title != null &&
                    input.Title != null &&
                    this.Title.SequenceEqual(input.Title)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }
    }

}
