/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// HistogramInterval
    /// </summary>
    [DataContract]
    public partial class HistogramInterval :  IEquatable<HistogramInterval>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistogramInterval" /> class.
        /// </summary>
        /// <param name="bin">Histogram bin.</param>
        /// <param name="count">Histogram bin size.</param>
        public HistogramInterval(int bin = default(int), int count = default(int))
        {
            this.Bin = bin;
            this.Count = count;
        }
        
        /// <summary>
        /// Histogram bin
        /// </summary>
        /// <value>Histogram bin</value>
        [DataMember(Name="bin", EmitDefaultValue=false)]
        public int Bin { get; set; }

        /// <summary>
        /// Histogram bin size
        /// </summary>
        /// <value>Histogram bin size</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistogramInterval {\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistogramInterval);
        }

        /// <summary>
        /// Returns true if HistogramInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of HistogramInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistogramInterval input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bin != null)
                    hashCode = hashCode * 59 + this.Bin.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                return hashCode;
            }
        }
    }

}
