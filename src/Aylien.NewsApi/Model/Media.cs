/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Media
    /// </summary>
    [DataContract]
    public partial class Media :  IEquatable<Media>
    {
        /// <summary>
        /// The format of media
        /// </summary>
        /// <value>The format of media</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum BMP for value: BMP
            /// </summary>
            [EnumMember(Value = "BMP")]
            BMP = 1,

            /// <summary>
            /// Enum GIF for value: GIF
            /// </summary>
            [EnumMember(Value = "GIF")]
            GIF = 2,

            /// <summary>
            /// Enum JPEG for value: JPEG
            /// </summary>
            [EnumMember(Value = "JPEG")]
            JPEG = 3,

            /// <summary>
            /// Enum PNG for value: PNG
            /// </summary>
            [EnumMember(Value = "PNG")]
            PNG = 4,

            /// <summary>
            /// Enum TIFF for value: TIFF
            /// </summary>
            [EnumMember(Value = "TIFF")]
            TIFF = 5,

            /// <summary>
            /// Enum PSD for value: PSD
            /// </summary>
            [EnumMember(Value = "PSD")]
            PSD = 6,

            /// <summary>
            /// Enum ICO for value: ICO
            /// </summary>
            [EnumMember(Value = "ICO")]
            ICO = 7,

            /// <summary>
            /// Enum CUR for value: CUR
            /// </summary>
            [EnumMember(Value = "CUR")]
            CUR = 8,

            /// <summary>
            /// Enum WEBP for value: WEBP
            /// </summary>
            [EnumMember(Value = "WEBP")]
            WEBP = 9,

            /// <summary>
            /// Enum SVG for value: SVG
            /// </summary>
            [EnumMember(Value = "SVG")]
            SVG = 10

        }

        /// <summary>
        /// The format of media
        /// </summary>
        /// <value>The format of media</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// The type of media
        /// </summary>
        /// <value>The type of media</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Image for value: image
            /// </summary>
            [EnumMember(Value = "image")]
            Image = 1,

            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 2

        }

        /// <summary>
        /// The type of media
        /// </summary>
        /// <value>The type of media</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        /// <param name="contentLength">The content length of media.</param>
        /// <param name="format">The format of media.</param>
        /// <param name="height">The height of media.</param>
        /// <param name="type">The type of media.</param>
        /// <param name="url">A URL which points to the media file.</param>
        /// <param name="width">The width of media.</param>
        public Media(int contentLength = default(int), FormatEnum? format = default(FormatEnum?), int height = default(int), TypeEnum? type = default(TypeEnum?), string url = default(string), int width = default(int))
        {
            this.ContentLength = contentLength;
            this.Format = format;
            this.Height = height;
            this.Type = type;
            this.Url = url;
            this.Width = width;
        }
        
        /// <summary>
        /// The content length of media
        /// </summary>
        /// <value>The content length of media</value>
        [DataMember(Name="content_length", EmitDefaultValue=false)]
        public int ContentLength { get; set; }


        /// <summary>
        /// The height of media
        /// </summary>
        /// <value>The height of media</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int Height { get; set; }


        /// <summary>
        /// A URL which points to the media file
        /// </summary>
        /// <value>A URL which points to the media file</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The width of media
        /// </summary>
        /// <value>The width of media</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Media {\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Media);
        }

        /// <summary>
        /// Returns true if Media instances are equal
        /// </summary>
        /// <param name="input">Instance of Media to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Media input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentLength == input.ContentLength ||
                    (this.ContentLength != null &&
                    this.ContentLength.Equals(input.ContentLength))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentLength != null)
                    hashCode = hashCode * 59 + this.ContentLength.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }
    }

}
