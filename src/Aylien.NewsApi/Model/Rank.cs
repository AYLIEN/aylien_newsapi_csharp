/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Rank
    /// </summary>
    [DataContract]
    public partial class Rank :  IEquatable<Rank>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rank" /> class.
        /// </summary>
        /// <param name="country">The country code which the rank is in it.</param>
        /// <param name="fetchedAt">The fetched date of the rank.</param>
        /// <param name="rank">The rank.</param>
        public Rank(string country = default(string), DateTime fetchedAt = default(DateTime), int rank = default(int))
        {
            this.Country = country;
            this.FetchedAt = fetchedAt;
            this._Rank = rank;
        }
        
        /// <summary>
        /// The country code which the rank is in it
        /// </summary>
        /// <value>The country code which the rank is in it</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// The fetched date of the rank
        /// </summary>
        /// <value>The fetched date of the rank</value>
        [DataMember(Name="fetched_at", EmitDefaultValue=false)]
        public DateTime FetchedAt { get; set; }

        /// <summary>
        /// The rank
        /// </summary>
        /// <value>The rank</value>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public int _Rank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rank {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FetchedAt: ").Append(FetchedAt).Append("\n");
            sb.Append("  _Rank: ").Append(_Rank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rank);
        }

        /// <summary>
        /// Returns true if Rank instances are equal
        /// </summary>
        /// <param name="input">Instance of Rank to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rank input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.FetchedAt == input.FetchedAt ||
                    (this.FetchedAt != null &&
                    this.FetchedAt.Equals(input.FetchedAt))
                ) && 
                (
                    this._Rank == input._Rank ||
                    (this._Rank != null &&
                    this._Rank.Equals(input._Rank))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.FetchedAt != null)
                    hashCode = hashCode * 59 + this.FetchedAt.GetHashCode();
                if (this._Rank != null)
                    hashCode = hashCode * 59 + this._Rank.GetHashCode();
                return hashCode;
            }
        }
    }

}
