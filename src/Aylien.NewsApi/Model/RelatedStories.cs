/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// RelatedStories
    /// </summary>
    [DataContract]
    public partial class RelatedStories :  IEquatable<RelatedStories>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedStories" /> class.
        /// </summary>
        /// <param name="relatedStories">An array of related stories for the input story.</param>
        /// <param name="storyBody">The input story body.</param>
        /// <param name="storyLanguage">The input story language.</param>
        /// <param name="storyTitle">The input story title.</param>
        public RelatedStories(List<Story> relatedStories = default(List<Story>), string storyBody = default(string), string storyLanguage = default(string), string storyTitle = default(string))
        {
            this._RelatedStories = relatedStories;
            this.StoryBody = storyBody;
            this.StoryLanguage = storyLanguage;
            this.StoryTitle = storyTitle;
        }
        
        /// <summary>
        /// An array of related stories for the input story
        /// </summary>
        /// <value>An array of related stories for the input story</value>
        [DataMember(Name="related_stories", EmitDefaultValue=false)]
        public List<Story> _RelatedStories { get; set; }

        /// <summary>
        /// The input story body
        /// </summary>
        /// <value>The input story body</value>
        [DataMember(Name="story_body", EmitDefaultValue=false)]
        public string StoryBody { get; set; }

        /// <summary>
        /// The input story language
        /// </summary>
        /// <value>The input story language</value>
        [DataMember(Name="story_language", EmitDefaultValue=false)]
        public string StoryLanguage { get; set; }

        /// <summary>
        /// The input story title
        /// </summary>
        /// <value>The input story title</value>
        [DataMember(Name="story_title", EmitDefaultValue=false)]
        public string StoryTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelatedStories {\n");
            sb.Append("  _RelatedStories: ").Append(_RelatedStories).Append("\n");
            sb.Append("  StoryBody: ").Append(StoryBody).Append("\n");
            sb.Append("  StoryLanguage: ").Append(StoryLanguage).Append("\n");
            sb.Append("  StoryTitle: ").Append(StoryTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelatedStories);
        }

        /// <summary>
        /// Returns true if RelatedStories instances are equal
        /// </summary>
        /// <param name="input">Instance of RelatedStories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelatedStories input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._RelatedStories == input._RelatedStories ||
                    this._RelatedStories != null &&
                    input._RelatedStories != null &&
                    this._RelatedStories.SequenceEqual(input._RelatedStories)
                ) && 
                (
                    this.StoryBody == input.StoryBody ||
                    (this.StoryBody != null &&
                    this.StoryBody.Equals(input.StoryBody))
                ) && 
                (
                    this.StoryLanguage == input.StoryLanguage ||
                    (this.StoryLanguage != null &&
                    this.StoryLanguage.Equals(input.StoryLanguage))
                ) && 
                (
                    this.StoryTitle == input.StoryTitle ||
                    (this.StoryTitle != null &&
                    this.StoryTitle.Equals(input.StoryTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._RelatedStories != null)
                    hashCode = hashCode * 59 + this._RelatedStories.GetHashCode();
                if (this.StoryBody != null)
                    hashCode = hashCode * 59 + this.StoryBody.GetHashCode();
                if (this.StoryLanguage != null)
                    hashCode = hashCode * 59 + this.StoryLanguage.GetHashCode();
                if (this.StoryTitle != null)
                    hashCode = hashCode * 59 + this.StoryTitle.GetHashCode();
                return hashCode;
            }
        }
    }

}
