/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// ShareCount
    /// </summary>
    [DataContract]
    public partial class ShareCount :  IEquatable<ShareCount>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareCount" /> class.
        /// </summary>
        /// <param name="count">The number of shares.</param>
        /// <param name="fetchedAt">The fetched date of the shares.</param>
        public ShareCount(int count = default(int), DateTime fetchedAt = default(DateTime))
        {
            this.Count = count;
            this.FetchedAt = fetchedAt;
        }
        
        /// <summary>
        /// The number of shares
        /// </summary>
        /// <value>The number of shares</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }

        /// <summary>
        /// The fetched date of the shares
        /// </summary>
        /// <value>The fetched date of the shares</value>
        [DataMember(Name="fetched_at", EmitDefaultValue=false)]
        public DateTime FetchedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShareCount {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  FetchedAt: ").Append(FetchedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareCount);
        }

        /// <summary>
        /// Returns true if ShareCount instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareCount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareCount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.FetchedAt == input.FetchedAt ||
                    (this.FetchedAt != null &&
                    this.FetchedAt.Equals(input.FetchedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.FetchedAt != null)
                    hashCode = hashCode * 59 + this.FetchedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
