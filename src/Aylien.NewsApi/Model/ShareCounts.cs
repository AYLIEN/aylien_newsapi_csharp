/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// ShareCounts
    /// </summary>
    [DataContract]
    public partial class ShareCounts :  IEquatable<ShareCounts>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareCounts" /> class.
        /// </summary>
        /// <param name="facebook">Facebook shares count.</param>
        /// <param name="googlePlus">Google Plus shares count.</param>
        /// <param name="linkedin">LinkedIn shares count.</param>
        /// <param name="reddit">Reddit shares count.</param>
        public ShareCounts(List<ShareCount> facebook = default(List<ShareCount>), List<ShareCount> googlePlus = default(List<ShareCount>), List<ShareCount> linkedin = default(List<ShareCount>), List<ShareCount> reddit = default(List<ShareCount>))
        {
            this.Facebook = facebook;
            this.GooglePlus = googlePlus;
            this.Linkedin = linkedin;
            this.Reddit = reddit;
        }
        
        /// <summary>
        /// Facebook shares count
        /// </summary>
        /// <value>Facebook shares count</value>
        [DataMember(Name="facebook", EmitDefaultValue=false)]
        public List<ShareCount> Facebook { get; set; }

        /// <summary>
        /// Google Plus shares count
        /// </summary>
        /// <value>Google Plus shares count</value>
        [DataMember(Name="google_plus", EmitDefaultValue=false)]
        public List<ShareCount> GooglePlus { get; set; }

        /// <summary>
        /// LinkedIn shares count
        /// </summary>
        /// <value>LinkedIn shares count</value>
        [DataMember(Name="linkedin", EmitDefaultValue=false)]
        public List<ShareCount> Linkedin { get; set; }

        /// <summary>
        /// Reddit shares count
        /// </summary>
        /// <value>Reddit shares count</value>
        [DataMember(Name="reddit", EmitDefaultValue=false)]
        public List<ShareCount> Reddit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShareCounts {\n");
            sb.Append("  Facebook: ").Append(Facebook).Append("\n");
            sb.Append("  GooglePlus: ").Append(GooglePlus).Append("\n");
            sb.Append("  Linkedin: ").Append(Linkedin).Append("\n");
            sb.Append("  Reddit: ").Append(Reddit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareCounts);
        }

        /// <summary>
        /// Returns true if ShareCounts instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareCounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Facebook == input.Facebook ||
                    this.Facebook != null &&
                    input.Facebook != null &&
                    this.Facebook.SequenceEqual(input.Facebook)
                ) && 
                (
                    this.GooglePlus == input.GooglePlus ||
                    this.GooglePlus != null &&
                    input.GooglePlus != null &&
                    this.GooglePlus.SequenceEqual(input.GooglePlus)
                ) && 
                (
                    this.Linkedin == input.Linkedin ||
                    this.Linkedin != null &&
                    input.Linkedin != null &&
                    this.Linkedin.SequenceEqual(input.Linkedin)
                ) && 
                (
                    this.Reddit == input.Reddit ||
                    this.Reddit != null &&
                    input.Reddit != null &&
                    this.Reddit.SequenceEqual(input.Reddit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Facebook != null)
                    hashCode = hashCode * 59 + this.Facebook.GetHashCode();
                if (this.GooglePlus != null)
                    hashCode = hashCode * 59 + this.GooglePlus.GetHashCode();
                if (this.Linkedin != null)
                    hashCode = hashCode * 59 + this.Linkedin.GetHashCode();
                if (this.Reddit != null)
                    hashCode = hashCode * 59 + this.Reddit.GetHashCode();
                return hashCode;
            }
        }
    }

}
