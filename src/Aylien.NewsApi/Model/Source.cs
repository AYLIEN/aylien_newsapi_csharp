/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Source
    /// </summary>
    [DataContract]
    public partial class Source :  IEquatable<Source>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Source" /> class.
        /// </summary>
        /// <param name="description">A general explanation about the source.</param>
        /// <param name="domain">The domain name of the source which is extracted from the source URL.</param>
        /// <param name="homePageUrl">The home page URL of the source.</param>
        /// <param name="id">The source id which is a unique value.</param>
        /// <param name="linksInCount">The number of websites that link to the source.</param>
        /// <param name="locations">The source locations which are tend to be the physical locations of the source, e.g. BBC headquarter is located in London. .</param>
        /// <param name="logoUrl">A URL which points to the source logo.</param>
        /// <param name="name">The source name.</param>
        /// <param name="rankings">rankings.</param>
        /// <param name="scopes">The source scopes which is tend to be scope locations of the source, e.g. BBC scopes is international. .</param>
        /// <param name="title">The title of the home page URL.</param>
        public Source(string description = default(string), string domain = default(string), string homePageUrl = default(string), int id = default(int), int linksInCount = default(int), List<Location> locations = default(List<Location>), string logoUrl = default(string), string name = default(string), Rankings rankings = default(Rankings), List<Scope> scopes = default(List<Scope>), string title = default(string))
        {
            this.Description = description;
            this.Domain = domain;
            this.HomePageUrl = homePageUrl;
            this.Id = id;
            this.LinksInCount = linksInCount;
            this.Locations = locations;
            this.LogoUrl = logoUrl;
            this.Name = name;
            this.Rankings = rankings;
            this.Scopes = scopes;
            this.Title = title;
        }
        
        /// <summary>
        /// A general explanation about the source
        /// </summary>
        /// <value>A general explanation about the source</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The domain name of the source which is extracted from the source URL
        /// </summary>
        /// <value>The domain name of the source which is extracted from the source URL</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// The home page URL of the source
        /// </summary>
        /// <value>The home page URL of the source</value>
        [DataMember(Name="home_page_url", EmitDefaultValue=false)]
        public string HomePageUrl { get; set; }

        /// <summary>
        /// The source id which is a unique value
        /// </summary>
        /// <value>The source id which is a unique value</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The number of websites that link to the source
        /// </summary>
        /// <value>The number of websites that link to the source</value>
        [DataMember(Name="links_in_count", EmitDefaultValue=false)]
        public int LinksInCount { get; set; }

        /// <summary>
        /// The source locations which are tend to be the physical locations of the source, e.g. BBC headquarter is located in London. 
        /// </summary>
        /// <value>The source locations which are tend to be the physical locations of the source, e.g. BBC headquarter is located in London. </value>
        [DataMember(Name="locations", EmitDefaultValue=false)]
        public List<Location> Locations { get; set; }

        /// <summary>
        /// A URL which points to the source logo
        /// </summary>
        /// <value>A URL which points to the source logo</value>
        [DataMember(Name="logo_url", EmitDefaultValue=false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// The source name
        /// </summary>
        /// <value>The source name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rankings
        /// </summary>
        [DataMember(Name="rankings", EmitDefaultValue=false)]
        public Rankings Rankings { get; set; }

        /// <summary>
        /// The source scopes which is tend to be scope locations of the source, e.g. BBC scopes is international. 
        /// </summary>
        /// <value>The source scopes which is tend to be scope locations of the source, e.g. BBC scopes is international. </value>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public List<Scope> Scopes { get; set; }

        /// <summary>
        /// The title of the home page URL
        /// </summary>
        /// <value>The title of the home page URL</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Source {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  HomePageUrl: ").Append(HomePageUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LinksInCount: ").Append(LinksInCount).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rankings: ").Append(Rankings).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Source);
        }

        /// <summary>
        /// Returns true if Source instances are equal
        /// </summary>
        /// <param name="input">Instance of Source to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Source input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.HomePageUrl == input.HomePageUrl ||
                    (this.HomePageUrl != null &&
                    this.HomePageUrl.Equals(input.HomePageUrl))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LinksInCount == input.LinksInCount ||
                    (this.LinksInCount != null &&
                    this.LinksInCount.Equals(input.LinksInCount))
                ) && 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    input.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rankings == input.Rankings ||
                    (this.Rankings != null &&
                    this.Rankings.Equals(input.Rankings))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.HomePageUrl != null)
                    hashCode = hashCode * 59 + this.HomePageUrl.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LinksInCount != null)
                    hashCode = hashCode * 59 + this.LinksInCount.GetHashCode();
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                if (this.LogoUrl != null)
                    hashCode = hashCode * 59 + this.LogoUrl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rankings != null)
                    hashCode = hashCode * 59 + this.Rankings.GetHashCode();
                if (this.Scopes != null)
                    hashCode = hashCode * 59 + this.Scopes.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }
    }

}
