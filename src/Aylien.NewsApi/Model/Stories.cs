/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Stories
    /// </summary>
    [DataContract]
    public partial class Stories :  IEquatable<Stories>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Stories" /> class.
        /// </summary>
        /// <param name="nextPageCursor">The next page cursor.</param>
        /// <param name="stories">An array of stories.</param>
        public Stories(string nextPageCursor = default(string), List<Story> stories = default(List<Story>))
        {
            this.NextPageCursor = nextPageCursor;
            this._Stories = stories;
        }
        
        /// <summary>
        /// The next page cursor
        /// </summary>
        /// <value>The next page cursor</value>
        [DataMember(Name="next_page_cursor", EmitDefaultValue=false)]
        public string NextPageCursor { get; set; }

        /// <summary>
        /// An array of stories
        /// </summary>
        /// <value>An array of stories</value>
        [DataMember(Name="stories", EmitDefaultValue=false)]
        public List<Story> _Stories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Stories {\n");
            sb.Append("  NextPageCursor: ").Append(NextPageCursor).Append("\n");
            sb.Append("  _Stories: ").Append(_Stories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Stories);
        }

        /// <summary>
        /// Returns true if Stories instances are equal
        /// </summary>
        /// <param name="input">Instance of Stories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stories input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NextPageCursor == input.NextPageCursor ||
                    (this.NextPageCursor != null &&
                    this.NextPageCursor.Equals(input.NextPageCursor))
                ) && 
                (
                    this._Stories == input._Stories ||
                    this._Stories != null &&
                    input._Stories != null &&
                    this._Stories.SequenceEqual(input._Stories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NextPageCursor != null)
                    hashCode = hashCode * 59 + this.NextPageCursor.GetHashCode();
                if (this._Stories != null)
                    hashCode = hashCode * 59 + this._Stories.GetHashCode();
                return hashCode;
            }
        }
    }

}
