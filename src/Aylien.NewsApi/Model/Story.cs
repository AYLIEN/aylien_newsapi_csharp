/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Story
    /// </summary>
    [DataContract]
    public partial class Story :  IEquatable<Story>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Story" /> class.
        /// </summary>
        /// <param name="author">author.</param>
        /// <param name="body">Body of the story.</param>
        /// <param name="categories">Suggested categories for the story.</param>
        /// <param name="charactersCount">Character count of the story body.</param>
        /// <param name="clusters">An array of clusters the story is associated with.</param>
        /// <param name="entities">entities.</param>
        /// <param name="hashtags">An array of suggested Story hashtags.</param>
        /// <param name="id">ID of the story which is a unique identification.</param>
        /// <param name="keywords">Extracted keywords mentioned in the story title or body.</param>
        /// <param name="language">Language of the story.</param>
        /// <param name="links">links.</param>
        /// <param name="media">An array of extracted media such as images and videos.</param>
        /// <param name="paragraphsCount">Paragraph count of the story body.</param>
        /// <param name="publishedAt">Published date of the story.</param>
        /// <param name="sentencesCount">Sentence count of the story body.</param>
        /// <param name="sentiment">sentiment.</param>
        /// <param name="socialSharesCount">socialSharesCount.</param>
        /// <param name="source">source.</param>
        /// <param name="summary">summary.</param>
        /// <param name="title">Title of the story.</param>
        /// <param name="translations">translations.</param>
        /// <param name="wordsCount">Word count of the story body.</param>
        public Story(Author author = default(Author), string body = default(string), List<Category> categories = default(List<Category>), int charactersCount = default(int), List<long> clusters = default(List<long>), Entities entities = default(Entities), List<string> hashtags = default(List<string>), long id = default(long), List<string> keywords = default(List<string>), string language = default(string), StoryLinks links = default(StoryLinks), List<Media> media = default(List<Media>), int paragraphsCount = default(int), DateTime publishedAt = default(DateTime), int sentencesCount = default(int), Sentiments sentiment = default(Sentiments), ShareCounts socialSharesCount = default(ShareCounts), Source source = default(Source), Summary summary = default(Summary), string title = default(string), StoryTranslations translations = default(StoryTranslations), int wordsCount = default(int))
        {
            this.Author = author;
            this.Body = body;
            this.Categories = categories;
            this.CharactersCount = charactersCount;
            this.Clusters = clusters;
            this.Entities = entities;
            this.Hashtags = hashtags;
            this.Id = id;
            this.Keywords = keywords;
            this.Language = language;
            this.Links = links;
            this.Media = media;
            this.ParagraphsCount = paragraphsCount;
            this.PublishedAt = publishedAt;
            this.SentencesCount = sentencesCount;
            this.Sentiment = sentiment;
            this.SocialSharesCount = socialSharesCount;
            this.Source = source;
            this.Summary = summary;
            this.Title = title;
            this.Translations = translations;
            this.WordsCount = wordsCount;
        }
        
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public Author Author { get; set; }

        /// <summary>
        /// Body of the story
        /// </summary>
        /// <value>Body of the story</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Suggested categories for the story
        /// </summary>
        /// <value>Suggested categories for the story</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<Category> Categories { get; set; }

        /// <summary>
        /// Character count of the story body
        /// </summary>
        /// <value>Character count of the story body</value>
        [DataMember(Name="characters_count", EmitDefaultValue=false)]
        public int CharactersCount { get; set; }

        /// <summary>
        /// An array of clusters the story is associated with
        /// </summary>
        /// <value>An array of clusters the story is associated with</value>
        [DataMember(Name="clusters", EmitDefaultValue=false)]
        public List<long> Clusters { get; set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name="entities", EmitDefaultValue=false)]
        public Entities Entities { get; set; }

        /// <summary>
        /// An array of suggested Story hashtags
        /// </summary>
        /// <value>An array of suggested Story hashtags</value>
        [DataMember(Name="hashtags", EmitDefaultValue=false)]
        public List<string> Hashtags { get; set; }

        /// <summary>
        /// ID of the story which is a unique identification
        /// </summary>
        /// <value>ID of the story which is a unique identification</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Extracted keywords mentioned in the story title or body
        /// </summary>
        /// <value>Extracted keywords mentioned in the story title or body</value>
        [DataMember(Name="keywords", EmitDefaultValue=false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Language of the story
        /// </summary>
        /// <value>Language of the story</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public StoryLinks Links { get; set; }

        /// <summary>
        /// An array of extracted media such as images and videos
        /// </summary>
        /// <value>An array of extracted media such as images and videos</value>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public List<Media> Media { get; set; }

        /// <summary>
        /// Paragraph count of the story body
        /// </summary>
        /// <value>Paragraph count of the story body</value>
        [DataMember(Name="paragraphs_count", EmitDefaultValue=false)]
        public int ParagraphsCount { get; set; }

        /// <summary>
        /// Published date of the story
        /// </summary>
        /// <value>Published date of the story</value>
        [DataMember(Name="published_at", EmitDefaultValue=false)]
        public DateTime PublishedAt { get; set; }

        /// <summary>
        /// Sentence count of the story body
        /// </summary>
        /// <value>Sentence count of the story body</value>
        [DataMember(Name="sentences_count", EmitDefaultValue=false)]
        public int SentencesCount { get; set; }

        /// <summary>
        /// Gets or Sets Sentiment
        /// </summary>
        [DataMember(Name="sentiment", EmitDefaultValue=false)]
        public Sentiments Sentiment { get; set; }

        /// <summary>
        /// Gets or Sets SocialSharesCount
        /// </summary>
        [DataMember(Name="social_shares_count", EmitDefaultValue=false)]
        public ShareCounts SocialSharesCount { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public Source Source { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public Summary Summary { get; set; }

        /// <summary>
        /// Title of the story
        /// </summary>
        /// <value>Title of the story</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Translations
        /// </summary>
        [DataMember(Name="translations", EmitDefaultValue=false)]
        public StoryTranslations Translations { get; set; }

        /// <summary>
        /// Word count of the story body
        /// </summary>
        /// <value>Word count of the story body</value>
        [DataMember(Name="words_count", EmitDefaultValue=false)]
        public int WordsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Story {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CharactersCount: ").Append(CharactersCount).Append("\n");
            sb.Append("  Clusters: ").Append(Clusters).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  Hashtags: ").Append(Hashtags).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  ParagraphsCount: ").Append(ParagraphsCount).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  SentencesCount: ").Append(SentencesCount).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  SocialSharesCount: ").Append(SocialSharesCount).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Translations: ").Append(Translations).Append("\n");
            sb.Append("  WordsCount: ").Append(WordsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Story);
        }

        /// <summary>
        /// Returns true if Story instances are equal
        /// </summary>
        /// <param name="input">Instance of Story to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Story input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.CharactersCount == input.CharactersCount ||
                    (this.CharactersCount != null &&
                    this.CharactersCount.Equals(input.CharactersCount))
                ) && 
                (
                    this.Clusters == input.Clusters ||
                    this.Clusters != null &&
                    input.Clusters != null &&
                    this.Clusters.SequenceEqual(input.Clusters)
                ) && 
                (
                    this.Entities == input.Entities ||
                    (this.Entities != null &&
                    this.Entities.Equals(input.Entities))
                ) && 
                (
                    this.Hashtags == input.Hashtags ||
                    this.Hashtags != null &&
                    input.Hashtags != null &&
                    this.Hashtags.SequenceEqual(input.Hashtags)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                ) && 
                (
                    this.ParagraphsCount == input.ParagraphsCount ||
                    (this.ParagraphsCount != null &&
                    this.ParagraphsCount.Equals(input.ParagraphsCount))
                ) && 
                (
                    this.PublishedAt == input.PublishedAt ||
                    (this.PublishedAt != null &&
                    this.PublishedAt.Equals(input.PublishedAt))
                ) && 
                (
                    this.SentencesCount == input.SentencesCount ||
                    (this.SentencesCount != null &&
                    this.SentencesCount.Equals(input.SentencesCount))
                ) && 
                (
                    this.Sentiment == input.Sentiment ||
                    (this.Sentiment != null &&
                    this.Sentiment.Equals(input.Sentiment))
                ) && 
                (
                    this.SocialSharesCount == input.SocialSharesCount ||
                    (this.SocialSharesCount != null &&
                    this.SocialSharesCount.Equals(input.SocialSharesCount))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Translations == input.Translations ||
                    (this.Translations != null &&
                    this.Translations.Equals(input.Translations))
                ) && 
                (
                    this.WordsCount == input.WordsCount ||
                    (this.WordsCount != null &&
                    this.WordsCount.Equals(input.WordsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.CharactersCount != null)
                    hashCode = hashCode * 59 + this.CharactersCount.GetHashCode();
                if (this.Clusters != null)
                    hashCode = hashCode * 59 + this.Clusters.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                if (this.Hashtags != null)
                    hashCode = hashCode * 59 + this.Hashtags.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.ParagraphsCount != null)
                    hashCode = hashCode * 59 + this.ParagraphsCount.GetHashCode();
                if (this.PublishedAt != null)
                    hashCode = hashCode * 59 + this.PublishedAt.GetHashCode();
                if (this.SentencesCount != null)
                    hashCode = hashCode * 59 + this.SentencesCount.GetHashCode();
                if (this.Sentiment != null)
                    hashCode = hashCode * 59 + this.Sentiment.GetHashCode();
                if (this.SocialSharesCount != null)
                    hashCode = hashCode * 59 + this.SocialSharesCount.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Translations != null)
                    hashCode = hashCode * 59 + this.Translations.GetHashCode();
                if (this.WordsCount != null)
                    hashCode = hashCode * 59 + this.WordsCount.GetHashCode();
                return hashCode;
            }
        }
    }

}
