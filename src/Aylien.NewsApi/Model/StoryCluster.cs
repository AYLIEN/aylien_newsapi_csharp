/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// StoryCluster
    /// </summary>
    [DataContract]
    public partial class StoryCluster :  IEquatable<StoryCluster>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoryCluster" /> class.
        /// </summary>
        /// <param name="id">A unique identification for the cluster.</param>
        /// <param name="phrases">Suggested labels for the cluster.</param>
        /// <param name="score">The cluster score.</param>
        /// <param name="size">Size of the cluster.</param>
        /// <param name="stories">Story ids which are in the cluster.</param>
        public StoryCluster(int id = default(int), List<string> phrases = default(List<string>), double score = default(double), int size = default(int), List<long> stories = default(List<long>))
        {
            this.Id = id;
            this.Phrases = phrases;
            this.Score = score;
            this.Size = size;
            this.Stories = stories;
        }
        
        /// <summary>
        /// A unique identification for the cluster
        /// </summary>
        /// <value>A unique identification for the cluster</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Suggested labels for the cluster
        /// </summary>
        /// <value>Suggested labels for the cluster</value>
        [DataMember(Name="phrases", EmitDefaultValue=false)]
        public List<string> Phrases { get; set; }

        /// <summary>
        /// The cluster score
        /// </summary>
        /// <value>The cluster score</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double Score { get; set; }

        /// <summary>
        /// Size of the cluster
        /// </summary>
        /// <value>Size of the cluster</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int Size { get; set; }

        /// <summary>
        /// Story ids which are in the cluster
        /// </summary>
        /// <value>Story ids which are in the cluster</value>
        [DataMember(Name="stories", EmitDefaultValue=false)]
        public List<long> Stories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoryCluster {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Phrases: ").Append(Phrases).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Stories: ").Append(Stories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoryCluster);
        }

        /// <summary>
        /// Returns true if StoryCluster instances are equal
        /// </summary>
        /// <param name="input">Instance of StoryCluster to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoryCluster input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Phrases == input.Phrases ||
                    this.Phrases != null &&
                    input.Phrases != null &&
                    this.Phrases.SequenceEqual(input.Phrases)
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Stories == input.Stories ||
                    this.Stories != null &&
                    input.Stories != null &&
                    this.Stories.SequenceEqual(input.Stories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Phrases != null)
                    hashCode = hashCode * 59 + this.Phrases.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Stories != null)
                    hashCode = hashCode * 59 + this.Stories.GetHashCode();
                return hashCode;
            }
        }
    }

}
