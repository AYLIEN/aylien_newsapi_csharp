/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// TimeSeries
    /// </summary>
    [DataContract]
    public partial class TimeSeries :  IEquatable<TimeSeries>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSeries" /> class.
        /// </summary>
        /// <param name="count">The count of time series bin.</param>
        /// <param name="publishedAt">The published date of the time series bin.</param>
        public TimeSeries(int count = default(int), DateTime publishedAt = default(DateTime))
        {
            this.Count = count;
            this.PublishedAt = publishedAt;
        }
        
        /// <summary>
        /// The count of time series bin
        /// </summary>
        /// <value>The count of time series bin</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }

        /// <summary>
        /// The published date of the time series bin
        /// </summary>
        /// <value>The published date of the time series bin</value>
        [DataMember(Name="published_at", EmitDefaultValue=false)]
        public DateTime PublishedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeSeries {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeSeries);
        }

        /// <summary>
        /// Returns true if TimeSeries instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeSeries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeSeries input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.PublishedAt == input.PublishedAt ||
                    (this.PublishedAt != null &&
                    this.PublishedAt.Equals(input.PublishedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.PublishedAt != null)
                    hashCode = hashCode * 59 + this.PublishedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
