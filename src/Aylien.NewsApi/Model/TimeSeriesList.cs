/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// TimeSeriesList
    /// </summary>
    [DataContract]
    public partial class TimeSeriesList :  IEquatable<TimeSeriesList>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSeriesList" /> class.
        /// </summary>
        /// <param name="period">The size of each date range expressed as an interval to be added to the lower bound. .</param>
        /// <param name="publishedAtEnd">The end published date of the time series.</param>
        /// <param name="publishedAtStart">The start published date of the time series.</param>
        /// <param name="timeSeries">An array of time series.</param>
        public TimeSeriesList(string period = default(string), DateTime publishedAtEnd = default(DateTime), DateTime publishedAtStart = default(DateTime), List<TimeSeries> timeSeries = default(List<TimeSeries>))
        {
            this.Period = period;
            this.PublishedAtEnd = publishedAtEnd;
            this.PublishedAtStart = publishedAtStart;
            this.TimeSeries = timeSeries;
        }
        
        /// <summary>
        /// The size of each date range expressed as an interval to be added to the lower bound. 
        /// </summary>
        /// <value>The size of each date range expressed as an interval to be added to the lower bound. </value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public string Period { get; set; }

        /// <summary>
        /// The end published date of the time series
        /// </summary>
        /// <value>The end published date of the time series</value>
        [DataMember(Name="published_at.end", EmitDefaultValue=false)]
        public DateTime PublishedAtEnd { get; set; }

        /// <summary>
        /// The start published date of the time series
        /// </summary>
        /// <value>The start published date of the time series</value>
        [DataMember(Name="published_at.start", EmitDefaultValue=false)]
        public DateTime PublishedAtStart { get; set; }

        /// <summary>
        /// An array of time series
        /// </summary>
        /// <value>An array of time series</value>
        [DataMember(Name="time_series", EmitDefaultValue=false)]
        public List<TimeSeries> TimeSeries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeSeriesList {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PublishedAtEnd: ").Append(PublishedAtEnd).Append("\n");
            sb.Append("  PublishedAtStart: ").Append(PublishedAtStart).Append("\n");
            sb.Append("  TimeSeries: ").Append(TimeSeries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeSeriesList);
        }

        /// <summary>
        /// Returns true if TimeSeriesList instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeSeriesList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeSeriesList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.PublishedAtEnd == input.PublishedAtEnd ||
                    (this.PublishedAtEnd != null &&
                    this.PublishedAtEnd.Equals(input.PublishedAtEnd))
                ) && 
                (
                    this.PublishedAtStart == input.PublishedAtStart ||
                    (this.PublishedAtStart != null &&
                    this.PublishedAtStart.Equals(input.PublishedAtStart))
                ) && 
                (
                    this.TimeSeries == input.TimeSeries ||
                    this.TimeSeries != null &&
                    input.TimeSeries != null &&
                    this.TimeSeries.SequenceEqual(input.TimeSeries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.PublishedAtEnd != null)
                    hashCode = hashCode * 59 + this.PublishedAtEnd.GetHashCode();
                if (this.PublishedAtStart != null)
                    hashCode = hashCode * 59 + this.PublishedAtStart.GetHashCode();
                if (this.TimeSeries != null)
                    hashCode = hashCode * 59 + this.TimeSeries.GetHashCode();
                return hashCode;
            }
        }
    }

}
