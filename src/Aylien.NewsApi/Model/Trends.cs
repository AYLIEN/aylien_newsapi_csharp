/* 
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Aylien.NewsApi.Client.OpenAPIDateConverter;

namespace Aylien.NewsApi.Model
{
    /// <summary>
    /// Trends
    /// </summary>
    [DataContract]
    public partial class Trends :  IEquatable<Trends>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trends" /> class.
        /// </summary>
        /// <param name="field">The field of trends.</param>
        /// <param name="trends">An array of trends.</param>
        public Trends(string field = default(string), List<Trend> trends = default(List<Trend>))
        {
            this.Field = field;
            this._Trends = trends;
        }
        
        /// <summary>
        /// The field of trends
        /// </summary>
        /// <value>The field of trends</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }

        /// <summary>
        /// An array of trends
        /// </summary>
        /// <value>An array of trends</value>
        [DataMember(Name="trends", EmitDefaultValue=false)]
        public List<Trend> _Trends { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trends {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  _Trends: ").Append(_Trends).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Trends);
        }

        /// <summary>
        /// Returns true if Trends instances are equal
        /// </summary>
        /// <param name="input">Instance of Trends to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trends input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this._Trends == input._Trends ||
                    this._Trends != null &&
                    input._Trends != null &&
                    this._Trends.SequenceEqual(input._Trends)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this._Trends != null)
                    hashCode = hashCode * 59 + this._Trends.GetHashCode();
                return hashCode;
            }
        }
    }

}
